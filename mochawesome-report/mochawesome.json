{
  "stats": {
    "suites": 2,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2019-07-30T07:38:48.921Z",
    "end": "2019-07-30T07:38:48.958Z",
    "duration": 37,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "60c56077-d896-46ea-b7c5-c7e84a2b3513",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
          "title": "简单桶排序测试",
          "fullFile": "/Users/agility/codes/project/private/algorithm_learning/test/_algorithm/_bucketSort.test.js",
          "file": "/test/_algorithm/_bucketSort.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "非数组数据异常抛出",
              "fullTitle": "简单桶排序测试 非数组数据异常抛出",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = { a: 3, b: 4 };\nvar testFunc = function testFunc() {\n  (0, _easeBucketSort2._easeBucketSort)(mockData);\n};\nexpect(testFunc).to.throw(Error, 'params are not required arrays');",
              "err": {},
              "uuid": "0f44ec82-eee3-4aa0-a88a-147a0a5ade71",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "长度1数组正确性测试",
              "fullTitle": "简单桶排序测试 长度1数组正确性测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = [3];\nexpect(mockData).to.deep.equal([3]);",
              "err": {},
              "uuid": "eee3f17a-4ef6-4bee-9ffa-1ffa40b5e717",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "数组含非number但可转换的为number的测试",
              "fullTitle": "简单桶排序测试 数组含非number但可转换的为number的测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = [3, '2', 3, 1, '34', 65, '8', 9, 8];\nvar rightResult = [1, 2, 3, 3, 8, 8, 9, 34, 65];\nexpect((0, _easeBucketSort2._easeBucketSort)(mockData)).to.deep.equal(rightResult);",
              "err": {},
              "uuid": "e2ae2faf-00fe-4706-8649-729ba336b105",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "数组含非number且不可转换为number的测试",
              "fullTitle": "简单桶排序测试 数组含非number且不可转换为number的测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = [3, 'dsfasdf', 3, 1, Error, 65];\nexpect((0, _easeBucketSort2._easeBucketSort)(mockData)).to.deep.equal([1, 3, 3, 65]);",
              "err": {},
              "uuid": "75f35e94-126b-4670-8f69-221d3711dbab",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "整数排序测试: [3,2,3,1,34,65,8,9,8] 应该返回 [1, 2, 3, 3, 8, 8, 9, 34, 65]",
              "fullTitle": "简单桶排序测试 整数排序测试: [3,2,3,1,34,65,8,9,8] 应该返回 [1, 2, 3, 3, 8, 8, 9, 34, 65]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = [3, 2, 3, 1, 34, 65, 8, 9, 8];\nvar rightResult = [1, 2, 3, 3, 8, 8, 9, 34, 65];\nexpect((0, _easeBucketSort2._easeBucketSort)(mockData)).to.deep.equal(rightResult);",
              "err": {},
              "uuid": "aa3a7ef2-c740-43fe-8e0a-ea3fd6e605bf",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "倒序排序测试: [1, 2, 3, 3, 8, 8, 9, 34, 65]应该返回[65, 34, 9, 8, 8, 3, 3, 2, 1]",
              "fullTitle": "简单桶排序测试 倒序排序测试: [1, 2, 3, 3, 8, 8, 9, 34, 65]应该返回[65, 34, 9, 8, 8, 3, 3, 2, 1]",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = [1, 2, 3, 3, 8, 8, 9, 34, 65];\nvar rightResult = [65, 34, 9, 8, 8, 3, 3, 2, 1];\nexpect((0, _easeBucketSort2._easeBucketSort)(mockData, false)).to.deep.equal(rightResult);",
              "err": {},
              "uuid": "21c8ae53-5df7-44c1-8730-8987713cb115",
              "parentUUID": "8254f4a0-3b8c-4840-826a-34b6a8d1e15f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0f44ec82-eee3-4aa0-a88a-147a0a5ade71",
            "eee3f17a-4ef6-4bee-9ffa-1ffa40b5e717",
            "e2ae2faf-00fe-4706-8649-729ba336b105",
            "75f35e94-126b-4670-8f69-221d3711dbab",
            "aa3a7ef2-c740-43fe-8e0a-ea3fd6e605bf",
            "21c8ae53-5df7-44c1-8730-8987713cb115"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
          "title": "深拷贝测试",
          "fullFile": "/Users/agility/codes/project/private/algorithm_learning/test/methods/object/cloneDeep.test.js",
          "file": "/test/methods/object/cloneDeep.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "非object or array异常数据测试",
              "fullTitle": "深拷贝测试 非object or array异常数据测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = function mockData() {\n  console.log('测试用例');\n};\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(mockData)).to.equal(mockData); // Function\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)('mockData')).to.equal('mockData'); // String\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(53543)).to.equal(53543); // Number\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(true)).to.be.true; // Boolean\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(null)).to.be.null; // null\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(undefined)).to.be.an('undefined'); // undefined",
              "err": {},
              "uuid": "aee7a19a-629a-410a-b34f-0e61742eee90",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "单层数组数据测试",
              "fullTitle": "深拷贝测试 单层数组数据测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testFunc = function testFunc() {\n  console.log('测试用例');\n};\nvar mockData = [1, '2', true, null, undefined, testFunc];\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(mockData)).to.not.equal(mockData); // 引用地址不相等\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(mockData)).to.eql(mockData); // key value 相等\nvar result = (0, _cloneDeep.cloneDeep)(mockData);\n(0, _chai.expect)(result[5]).to.equal(mockData[5]); // function clone 引用地址相等",
              "err": {},
              "uuid": "2e4a0d2c-0c2d-4a92-b2a6-d8b1373b0a57",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "单层对象数据测试",
              "fullTitle": "深拷贝测试 单层对象数据测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testFunc = function testFunc() {\n  console.log('测试用例');\n};\nvar mockData = {\n  a: 1,\n  b: '2',\n  c: true,\n  d: null,\n  e: undefined,\n  f: testFunc\n};\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(mockData)).to.not.equal(mockData); // 引用地址不相等\n(0, _chai.expect)((0, _cloneDeep.cloneDeep)(mockData)).to.eql(mockData); // key value 相等\nvar result = (0, _cloneDeep.cloneDeep)(mockData);\n(0, _chai.expect)(result['f']).to.equal(mockData['f']); // function clone 引用地址相等",
              "err": {},
              "uuid": "42858dcf-b75c-4ca5-92bc-90bce954d7f3",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "多层数组数据测试",
              "fullTitle": "深拷贝测试 多层数组数据测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testFunc = function testFunc() {\n  console.log('测试用例');\n};\nvar mockData = [1, '2', true, null, undefined, [testFunc, 'test']];\nvar result = (0, _cloneDeep.cloneDeep)(mockData);\n(0, _chai.expect)(result[5]).to.not.equal(mockData[5]); // 引用地址不相等\n(0, _chai.expect)(result[5]).to.eql(mockData[5]); // key value相等\n(0, _chai.expect)(result[5][0]).to.equal(mockData[5][0]); // function 引用地址相等",
              "err": {},
              "uuid": "e4422db4-9998-4ae1-b38d-d0d6a2e0f16a",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "多层对象数据测试",
              "fullTitle": "深拷贝测试 多层对象数据测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var testObject = {\n  a: 'fsdaf'\n};\nvar mockData = {\n  a: 1,\n  b: '2',\n  c: true,\n  d: null,\n  e: undefined,\n  f: testObject\n};\nvar result = (0, _cloneDeep.cloneDeep)(mockData);\n(0, _chai.expect)(result.f).to.not.equal(mockData.f); // 引用地址不相等\n(0, _chai.expect)(result.f).to.eql(mockData.f); // key value相等",
              "err": {},
              "uuid": "5be7a20b-a3c2-4d1b-80f2-a108ee150c25",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "循环引用测试",
              "fullTitle": "深拷贝测试 循环引用测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var mockData = {\n  a: 1,\n  b: '2',\n  c: true,\n  d: null,\n  e: undefined\n};\nmockData.f = mockData;\nvar result = (0, _cloneDeep.cloneDeep)(mockData);\n(0, _chai.expect)(result.f).to.equal(result); // 引用地址要相等\n(0, _chai.expect)(result.f).to.eql(result); // key value相等",
              "err": {},
              "uuid": "95f351aa-9753-4f22-ba07-ee3075b1e7dd",
              "parentUUID": "8a0f63dc-c275-49b4-bdc9-66ed37629ca6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aee7a19a-629a-410a-b34f-0e61742eee90",
            "2e4a0d2c-0c2d-4a92-b2a6-d8b1373b0a57",
            "42858dcf-b75c-4ca5-92bc-90bce954d7f3",
            "e4422db4-9998-4ae1-b38d-d0d6a2e0f16a",
            "5be7a20b-a3c2-4d1b-80f2-a108ee150c25",
            "95f351aa-9753-4f22-ba07-ee3075b1e7dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": {
        "doc": true
      },
      "version": "4.0.1"
    }
  }
}